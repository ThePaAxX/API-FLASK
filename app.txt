import uuid
from flask import Flask, request
from flask_smorest import abort
from db import items, stores

app = Flask(__name__)

@app.get('/stores') # Get all stores
def get_stores():
    return {'stores': list(stores.values())}


@app.get('/stores/<string:store_id>') # Get especific store
def get_store(store_id):
    try:
        return stores[store_id], 200
    except KeyError:
        abort(404, message='Store not found.')


@app.post('/stores') # Create new store
def create_stores():
    store_data  = request.get_json()
    if 'name' not in store_data:
        abort(400, message='Bad request. Ensure "name" is included in the JSON payload.')
    
    for store in stores.values():
        if store_data['name'] == store['name']:
            abort(400, message='Store with this name already exists.')

    store_id = uuid.uuid4().hex
    store = { **store_data, 'id': store_id, }
    stores[store_id] = store
    return store, 201


@app.delete('/store/<string:store_id>') # Delete specific store
def delete_store(store_id):
    try:
        del stores[store_id]
        return {'message': 'Store deleted successfully.'}, 200
    except KeyError:
        abort(400, message='Store not found')


@app.put('/store/<string:store_id>') # Change specific store
def update_store(store_id):
    item_data = request.get_json()

    if 'name' not in item_data:
        abort(
            400,
            message='Bad request. Ensure at least one of "name" or "price" is provided.'
        )

    for key in item_data.keys():
        if key not in ['name']:
            abort(
                400,
                message=f'Invalid field: {key}'
            )
    
    try:
        store = stores[store_id]
        store.update(item_data)
        return store, 200
    except KeyError:
        abort(404, message='Item not found.')


@app.get('/item') # Gell all items
def get_all_item():
    return {'items': list(items.values())}, 200


@app.post('/item') # Create new item in the store
def create_item():
    item_data = request.get_json()
    if (
        'store_id' not in item_data or
        'name' not in item_data or
        'price' not in item_data
    ):
        abort(
            400, 
            message='Bad request. Ensure store_id, name, and price are provided.'
        )
    
    for key in item_data.keys():
        if key not in ['store_id', 'name', 'price']:
            abort(
                400, 
                message=f'Invalid field: {key}')
    
    for item in items.values():
        if (
            item_data['name'] == item['name'] and
            item_data['store_id'] == item['store_id']
        ):
            abort(
                400,
                message='Item already exists in this store.'
            )

    if item_data['store_id'] not in stores:
        abort(404, message='Store not found.')

    item_id = uuid.uuid4().hex
    item = { **item_data, 'id': item_id }
    items[item_id] = item

    return item, 201


@app.get('/item/<string:item_id>') # Get specific item
def get_item(item_id):
    try:
        return items[item_id], 200
    except KeyError:
        abort(404, message='Item not found.')


@app.delete('/item/<string:item_id>') # Delete specific item
def delete_item(item_id):
    try:
        del items[item_id]
        return {'message': 'Item deleted successfully.'}, 200
    except KeyError:
        abort(404, message='Item not found.')


@app.put('/item/<string:item_id>') # Change specific item
def update_item(item_id):
    item_data = request.get_json()

    if 'name' not in item_data and 'price' not in item_data:
        abort(
            400,
            message='Bad request. Ensure at least one of "name" or "price" is provided.'
        )

    for key in item_data.keys():
        if key not in ['name', 'price']:
            abort(
                400,
                message=f'Invalid field: {key}'
            )
    
    try:
        item = items[item_id]
        item.update(item_data)
        return item, 200
    except KeyError:
        abort(404, message='Item not found.')

